<?xml version="1.0" encoding="UTF-8" standalone="no"?><exercises><exercise><exerciseName>
            Test Name
        </exerciseName><exerciseText>
            Das ist auch ein Text
        
        
</exerciseText><class>
            import org.junit.Test;
            import static org.junit.Assert.assertEquals;
            public class TestClass{
            @Test
            public void testGetTrue(){
            assertEquals(true, Class.getTrue());
            }
            @Test
            public void testGetTruetoo(){
            assertEquals(false, Class.getFalse());
            }
            @Test
            public void testGetTwo(){
            assertEquals(3, Class.getTwo());
            }
            }
        
        
</class><testClass>
            import org.junit.Test;
            import static org.junit.Assert.assertEquals;
            public class TestClass{
            @Test
            public void testGetTrue(){
            assertEquals(true, Class.getTrue());
            }
            @Test
            public void testGetTruetoo(){
            assertEquals(false, Class.getFalse());
            }
            @Test
            public void testGetTwo(){
            assertEquals(3, Class.getTwo());
            }
            }
        
        
</testClass><state>1</state><enableBabySteps>true</enableBabySteps><BabyStepTimer>60</BabyStepTimer><enableATTD>true</enableATTD><ATTD> Hier Akzeptanztests schreiben.
</ATTD></exercise><exercise><exerciseName>
            Other Name
            </exerciseName><exerciseText>
            Hier geh√∂rt der Aufgaben text hin.
        
            
</exerciseText><class>
            public class Class{
		public static Boolean getTrue(){
			return true;
		}
		public static Boolean getFalse(){
			return false;
		}
}
            
</class><testClass>
            import org.junit.Test;
            import static org.junit.Assert.assertEquals;
            public class TestClass{
            @Test
            public void testGetTrue(){
            assertEquals(true, Class.getTrue());
            }
            @Test
            public void testGetFalse(){
            assertEquals(false, Class.getFalse());
            }
 }
        
            
</testClass><state>2</state><enableBabySteps>true</enableBabySteps><BabyStepTimer>60</BabyStepTimer><enableATTD>true</enableATTD><ATTD>
            public class Class{
		public static Boolean getTrue(){
			return true;
		}
}
            
</ATTD></exercise><exercise><exerciseName>
            Game of Life
            </exerciseName><exerciseText> Hier Akzeptanztests schreiben.
fdgdfhdfhfdgjd
</exerciseText><class>
            
public class GameOfLife {

	/*
	 * Gibt die Anzahl der Nachbarn der Zelle an Position zeile, spalte in dem
	 * Array board zurueck.
	 */
	public static int zaehleLebendeNachbarn(int[][] board, int zeile, int spalte) {
		return -1;
	}

	/*
	 * Gibt 0 zurueck, falls die Zelle in der naechsten Generation tot sein soll
	 * Gibt 1 zurueck, falls die Zelle in der naechsten Generation lebendig sein soll
	 */
	public static int spielregel(int nachbarn, int aktiv) {
		return -1;
	}

	/* Ausgehend von dem Array board wird ein Schritt berechnet.
	 * Hinweis: Alle Randzellen sind immer 0
	 */
	public static int[][] berechneNaechsteGeneration(int[][] board) {
		return board;
	}

// *******************************************************************************************
//                              AB HIER NICHTS AENDERN
// *******************************************************************************************


// Diese Funktion kann fuer das Debugging verwendet werden 
	public static void printBoard(int[][] b) {
		for (int i = 0; i   &lt;  b.length; i++) {
			for (int j = 0; j   &lt;  b[i].length - 1; j++) {
				System.out.print(b[i][j] + " ");
			}
			System.out.println(b[i][b[i].length - 1]);
		}
	}

// Erzeuge ein zufaelliges Board
	public static int[][] createRandomBoard(int size) {
		int[][] b = new int[size][size];
		for (int i = 1; i   &lt;  b.length - 1; i++) {
			for (int j = 1; j   &lt;  b.length - 1; j++) {
				if (Math.random() &gt; 0.9)
					b[i][j] = 1;
			}
		}
		return b;
	}

// Demo (board erzeugen, ausgeben, einen Schritt berechnen, ausgeben)
	public static void main(String[] args) {
		int[][] board = createRandomBoard(30);
		printBoard(board);
		printBoard(berechneNaechsteGeneration(board));
	}

}

        
            
</class><testClass>
import static org.junit.Assert.*;

import org.junit.Test;

public class GameOfLifeTest {
 
  
}
        
            
</testClass><state>0</state><enableBabySteps>true</enableBabySteps><BabyStepTimer>120</BabyStepTimer><enableATTD>true</enableATTD><ATTD> Hier Akzeptanztests schreiben.
sgdffxhfdhdfhdfhfddhffd
</ATTD></exercise></exercises>