<?xml version="1.0" encoding="UTF-8" standalone="no"?><exercises><exercise><exerciseName>
            Beispielaufgabe: n^2
        </exerciseName><exerciseText>
            Dies ist eine Beispielaufgabe um die Funktionsweise des Programms zu testen.
            Implementieren sie die Funktion n^2
        
        
</exerciseText><class>


	public class Class{

	}
</class><testClass>
	import org.junit.Test;
	import static org.junit.Assert.assertEquals;
	public class TestClass{


}


	}
</testClass><state>1</state><enableBabySteps>false</enableBabySteps><BabyStepTimer>60</BabyStepTimer><enableATTD>true</enableATTD><ATTD>import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class FeatureTest{

}
</ATTD></exercise><exercise><exerciseName>
            Game of Life
            </exerciseName><exerciseText>
    Spielregeln: (Quelle: https://de.wikipedia.org/wiki/Conways_Spiel_des_Lebens)
    -Eine tote Zelle mit genau drei lebenden Nachbarn wird in der Folgegeneration neu geboren.
    -Lebende Zellen mit weniger als zwei lebenden Nachbarn sterben in der Folgegeneration an Einsamkeit.
    -Eine lebende Zelle mit zwei oder drei lebenden Nachbarn bleibt in der Folgegeneration am Leben.
    -Lebende Zellen mit mehr als drei lebenden Nachbarn sterben in der Folgegeneration an Überbevölkerung.
</exerciseText><class>
            
public class GameOfLife {

	/*
	 * Gibt die Anzahl der Nachbarn der Zelle an Position zeile, spalte in dem
	 * Array board zurueck.
	 */
	public static int zaehleLebendeNachbarn(int[][] board, int zeile, int spalte) {
		return -1;
	}

	/*
	 * Gibt 0 zurueck, falls die Zelle in der naechsten Generation tot sein soll
	 * Gibt 1 zurueck, falls die Zelle in der naechsten Generation lebendig sein soll
	 */
	public static int spielregel(int nachbarn, int aktiv) {
		return -1;
	}

	/* Ausgehend von dem Array board wird ein Schritt berechnet.
	 * Hinweis: Alle Randzellen sind immer 0
	 */
	public static int[][] berechneNaechsteGeneration(int[][] board) {
		return board;
	}

// *******************************************************************************************
//                              AB HIER NICHTS AENDERN
// *******************************************************************************************


// Diese Funktion kann fuer das Debugging verwendet werden 
	public static void printBoard(int[][] b) {
		for (int i = 0; i   &lt;  b.length; i++) {
			for (int j = 0; j   &lt;  b[i].length - 1; j++) {
				System.out.print(b[i][j] + " ");
			}
			System.out.println(b[i][b[i].length - 1]);
		}
	}

// Erzeuge ein zufaelliges Board
	public static int[][] createRandomBoard(int size) {
		int[][] b = new int[size][size];
		for (int i = 1; i   &lt;  b.length - 1; i++) {
			for (int j = 1; j   &lt;  b.length - 1; j++) {
				if (Math.random() &gt; 0.9)
					b[i][j] = 1;
			}
		}
		return b;
	}

// Demo (board erzeugen, ausgeben, einen Schritt berechnen, ausgeben)
	public static void main(String[] args) {
		int[][] board = createRandomBoard(30);
		printBoard(board);
		printBoard(berechneNaechsteGeneration(board));
	}

}
    // Quelle: (Informatik 1: praktische Übung 2)

        
            
</class><testClass>
import static org.junit.Assert.*;

import org.junit.Test;

public class GameOfLifeTest {
 
  
}
        
            
</testClass><state>0</state><enableBabySteps>true</enableBabySteps><BabyStepTimer>120</BabyStepTimer><enableATTD>true</enableATTD><ATTD> Hier Akzeptanztests schreiben.
</ATTD></exercise></exercises>